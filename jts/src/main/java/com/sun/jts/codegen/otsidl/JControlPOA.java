/*
 * Copyright (c) 1997, 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

package com.sun.jts.codegen.otsidl;

import java.util.Hashtable;

import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.CompletionStatus;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.InvokeHandler;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CosTransactions.Coordinator;
import org.omg.CosTransactions.CoordinatorHelper;
import org.omg.CosTransactions.Status;
import org.omg.CosTransactions.StatusHelper;
import org.omg.CosTransactions.StatusHolder;
import org.omg.CosTransactions.Terminator;
import org.omg.CosTransactions.TerminatorHelper;
import org.omg.CosTransactions.Unavailable;
import org.omg.CosTransactions.UnavailableHelper;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.Servant;

/**
 * com/sun/jts/codegen/otsidl/JControlPOA.java . Generated by the IDL-to-Java compiler (portable), version "3.1" from
 * com/sun/jts/ots.idl Tuesday, February 5, 2002 12:57:23 PM PST
 */

//#-----------------------------------------------------------------------------
public abstract class JControlPOA extends Servant implements JControlOperations, InvokeHandler {

    // Constructors

    private static Hashtable _methods = new Hashtable();
    static {
        _methods.put("getGlobalTID", 0);
        _methods.put("getLocalTID", 1);
        _methods.put("getTranState", 2);
        _methods.put("setTranState", 3);
        _methods.put("get_terminator", 4);
        _methods.put("get_coordinator", 5);
    }

    @Override
    public OutputStream _invoke(String $method, InputStream in, ResponseHandler $rh) {
        OutputStream out = null;
        Integer __method = (Integer) _methods.get($method);
        if (__method == null)
            throw new BAD_OPERATION(0, CompletionStatus.COMPLETED_MAYBE);

        switch (__method.intValue()) {
        case 0: // otsidl/JControl/getGlobalTID
        {
            StatusHolder status = new StatusHolder();
            org.omg.CosTransactions.otid_t $result = null;
            $result = this.getGlobalTID(status);
            out = $rh.createReply();
            org.omg.CosTransactions.otid_tHelper.write(out, $result);
            org.omg.CosTransactions.StatusHelper.write(out, status.value);
            break;
        }

        // transaction, and a value that indicates the state of the transaction.
        case 1: // otsidl/JControl/getLocalTID
        {
            StatusHolder status = new StatusHolder();
            long $result = 0;
            $result = this.getLocalTID(status);
            out = $rh.createReply();
            out.write_longlong($result);
            org.omg.CosTransactions.StatusHelper.write(out, status.value);
            break;
        }

        // value that indicates the state of the transaction.
        case 2: // otsidl/JControl/getTranState
        {
            Status $result = null;
            $result = this.getTranState();
            out = $rh.createReply();
            org.omg.CosTransactions.StatusHelper.write(out, $result);
            break;
        }

        // Returns the state of the transaction as the Control object knows it.
        case 3: // otsidl/JControl/setTranState
        {
            Status state = StatusHelper.read(in);
            this.setTranState(state);
            out = $rh.createReply();
            break;
        }

        case 4: // CosTransactions/Control/get_terminator
        {
            try {
                Terminator $result = null;
                $result = this.get_terminator();
                out = $rh.createReply();
                TerminatorHelper.write(out, $result);
            } catch (Unavailable $ex) {
                out = $rh.createExceptionReply();
                UnavailableHelper.write(out, $ex);
            }
            break;
        }

        case 5: // CosTransactions/Control/get_coordinator
        {
            try {
                Coordinator $result = null;
                $result = this.get_coordinator();
                out = $rh.createReply();
                CoordinatorHelper.write(out, $result);
            } catch (Unavailable $ex) {
                out = $rh.createExceptionReply();
                UnavailableHelper.write(out, $ex);
            }
            break;
        }

        default:
            throw new BAD_OPERATION(0, CompletionStatus.COMPLETED_MAYBE);
        }

        return out;
    } // _invoke

    // Type-specific CORBA::Object operations
    private static String[] __ids = { "IDL:otsidl/JControl:1.0", "IDL:omg.org/CosTransactions/Control:1.0" };

    @Override
    public String[] _all_interfaces(POA poa, byte[] objectId) {
        return __ids.clone();
    }

    public JControl _this() {
        return JControlHelper.narrow(super._this_object());
    }

    public JControl _this(org.omg.CORBA.ORB orb) {
        return JControlHelper.narrow(super._this_object(orb));
    }

}
